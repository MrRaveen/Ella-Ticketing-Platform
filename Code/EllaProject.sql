CREATE TABLE userInfo(
userID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
fname VARCHAR2(20),
lname VARCHAR2(40),
address VARCHAR2(120),
DOB date,
provience VARCHAR2(20),
city VARCHAR2(20),
NIC VARCHAR2(60),
contactNo VARCHAR2(20),
streetName VARCHAR2(60)
);
CREATE TABLE userAcc(
accountID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
createdDateTime TIMESTAMP,
status VARCHAR2(10) NOT NULL CHECK (status IN ('ONLINE','OFLINE')),
accStatus VARCHAR2(10) NOT NULL CHECK (accStatus IN ('ACTIVE','REMOVED','PAUSED')),
lastActiveTime TIMESTAMP,
email VARCHAR2(30),
user_password VARCHAR2(30),
userID NUMBER,
CONSTRAINT fk_userID FOREIGN KEY (userID) REFERENCES userInfo(userID) ON DELETE CASCADE
);


CREATE OR REPLACE FUNCTION getUserByMail(mail IN VARCHAR2)
RETURN SYS_REFCURSOR
IS
user_cursor SYS_REFCURSOR;
BEGIN
OPEN user_cursor FOR
SELECT * FROM USER_ACC WHERE EMAIL = mail;
RETURN user_cursor;
END;

--call the function
SET SERVEROUTPUT ON
DECLARE
cur SYS_REFCURSOR;
user_row USER_ACC%ROWTYPE;
BEGIN
cur := getUserByMail('qknX3Gn12zLPZcYPD6/on92+AD85wCLx4w6gvj6hcHY=');
LOOP
FETCH cur INTO user_row;
EXIT WHEN cur%NOTFOUND;
DBMS_OUTPUT.PUT_LINE('Email: ' || user_row.EMAIL);
DBMS_OUTPUT.PUT_LINE('Password: ' || user_row.USER_PASSWORD);
END LOOP;
CLOSE cur;
END;
SELECT * FROM USER_ACC WHERE EMAIL = 'qknX3Gn12zLPZcYPD6/on92+AD85wCLx4w6gvj6hcHY=';



